#!/bin/bash                             

ulimit -u


working_dir=sample_path
working_dirS=sample_path/sample_name
script_path=scripts_location
# table_path=tables_path
MYSQL_LOAD_WAIT=120
code_src=code_path
g7=$(basename $working_dirS)
working_dir_g7=${working_dir}/${g7}g7

g6=$(basename $working_dirS)
working_dir_g6=${working_dir}/${g6}g6

g5=$(basename $working_dirS)
working_dir_g5=${working_dir}/${g5}g5

g4=$(basename $working_dirS)
working_dir_g4=${working_dir}/${g4}g4

g3=$(basename $working_dirS)
working_dir_g3=${working_dir}/${g3}g3

g2=$(basename $working_dirS)
working_dir_g2=${working_dir}/${g2}g2

g1=$(basename $working_dirS)
working_dir_g1=${working_dir}/${g1}g1

cd $working_dir

_now=$(date +"%Y-%m-%d_%H-%M")

ls -1 $working_dir/completed.txt > /dev/null 2>&1
if [ "$?" = "0" ]; then
    echo "$working_dir/completed.txt exists"
else
    echo "Started a new run on $_now" >> $working_dir/completed.txt
fi

echo ${_now} >> $working_dir/time_check
timecheck=`(date +"Date: %Y-%m-%d Time %H:%M:%S")`;
# echo ${timecheck} >> $working_dir/time_check

mkdir ${working_dir}/javatmp

export PARALLEL="--env _JAVA_OPTIONS=-Djava.io.tmpdir=/mnt/tmp/tso_launcher_v3.0.0/javatmp"

grep "ND" ${working_dir}/downoption_file > /dev/null 2>&1
 if [ "$?" = "0" ]; then  # not down-sampling   
   echo "No down sampling fastq"
   echo "sh ${working_dir}/control_pileup.sh" > ${working_dir}/MappingCommands
   echo "sh ${working_dir}/sample_pileup.sh" >> ${working_dir}/MappingCommands
   parallel -j 2 --joblog ${working_dir}/mapping_jobs_log < MappingCommands 
   wait;
   echo "Finished control and sample pileup" >> $working_dir/completed.txt
  else    # down sampling the fastq
   echo "Down sampling fastq"
   echo "sh ${working_dir}/control_pileup_ds.sh" > ${working_dir}/MappingCommands
   echo "sh ${working_dir}/sample_pileup_ds.sh" >> ${working_dir}/MappingCommands
   parallel -j 1 --joblog ${working_dir}/mapping_jobs_log < MappingCommands 
   wait;
  echo "Finished control and sample down sampling pileup" >> $working_dir/completed.txt
  fi
  
   ln -s ${working_dir}/*.bam $working_dir_g7/
   ln -s ${working_dir}/*.bam $working_dir_g6/    
   ln -s ${working_dir}/*.bam $working_dir_g5/
   ln -s ${working_dir}/*.bam $working_dir_g4/
   ln -s ${working_dir}/*.bam $working_dir_g3/
   ln -s ${working_dir}/*.bam $working_dir_g2/  
   ln -s ${working_dir}/*.bam $working_dir_g1/
   
   ln -s ${working_dir}/*.bai $working_dir_g7/
   ln -s ${working_dir}/*.bai $working_dir_g6/    
   ln -s ${working_dir}/*.bai $working_dir_g5/
   ln -s ${working_dir}/*.bai $working_dir_g4/
   ln -s ${working_dir}/*.bai $working_dir_g3/
   ln -s ${working_dir}/*.bai $working_dir_g2/
   ln -s ${working_dir}/*.bai $working_dir_g1/
   
  echo "Mapping done and bam and bai linked and copied to 7 groups" >> $working_dir/completed.txt
    
  ## copy over the reference_genes_file to each sub-process
   cp ${working_dir}/reference_genes_file $working_dir_g7/
   cp ${working_dir}/reference_genes_file $working_dir_g6/
   cp ${working_dir}/reference_genes_file $working_dir_g5/
   cp ${working_dir}/reference_genes_file $working_dir_g4/
   cp ${working_dir}/reference_genes_file $working_dir_g3/
   cp ${working_dir}/reference_genes_file $working_dir_g2/
   cp ${working_dir}/reference_genes_file $working_dir_g1/
   
### Run the 7 groups via parallel here

echo "Assign subprocess(es) based on Submitted genes" 

 if [[ -s ${working_dir_g7}/chr21_22_X_Y_genes_file.txt ]]; then
    echo "sh ${working_dir_g7}/run_cnv_wrapper_${g7}g7.sh" >> ${working_dir}/RunGroupCommands
   else
    echo "No gene for chr21,22,X,Y subprocess because chr21_22_X_Y_genes_file.txt is zero in size"
 fi
 
 if [[ -s ${working_dir_g6}/chr17_18_19_20_genes_file.txt ]]; then
    echo "sh ${working_dir_g6}/run_cnv_wrapper_${g6}g6.sh" >> ${working_dir}/RunGroupCommands
     else
     echo "No gene for chr17-20 subprocess because chr17_18_19_20_genes_file.txt zero in size"
 fi
     
  if [[ -s ${working_dir_g5}/chr13_14_15_16_genes_file.txt ]]; then
    echo "sh ${working_dir_g5}/run_cnv_wrapper_${g5}g5.sh" >> ${working_dir}/RunGroupCommands
  else
    echo "No gene for chr13-16 subprocess because chr13_14_15_16_genes_file.txt zero in size"
  fi
  
  if [[ -s ${working_dir_g4}/chr9_10_11_12_genes_file.txt ]]; then
   echo "sh ${working_dir_g4}/run_cnv_wrapper_${g4}g4.sh" >> ${working_dir}/RunGroupCommands
  else 
   echo "No gene for chr9-12 subprocess because chr9_10_11_12_genes_file.txt zero in size"
  fi
  
  if [[ -s ${working_dir_g3}/chr6_7_8_genes_file.txt ]]; then
    echo "sh ${working_dir_g3}/run_cnv_wrapper_${g3}g3.sh" >> ${working_dir}/RunGroupCommands
   else
    echo "No gene for chr6-8 subprocess because chr6_7_8_genes_file.txt zero in size"
 fi
 
  if [[ -s ${working_dir_g2}/chr3_4_5_genes_file.txt ]]; then
    echo "sh ${working_dir_g2}/run_cnv_wrapper_${g2}g2.sh" >> ${working_dir}/RunGroupCommands
   else
    echo "No gene for chr3-5 subprocess because chr3_4_5_genes_file.txt zero in size"
   fi
   
   if [[ -s ${working_dir_g1}/chr1_2_genes_file.txt ]]; then
     echo "sh ${working_dir_g1}/run_cnv_wrapper_${g1}g1.sh" >> ${working_dir}/RunGroupCommands
    else
     echo "No gene for chr1-2 subprocess because chr1_2_genes_file.txt zero in size"
   fi

 echo "Running individual subprocesses via parallel"
 parallel -j +0 --joblog ${working_dir}/group_jobs_log < ${working_dir}/RunGroupCommands
 
 # parallel -j +0 < ${working_dir}/RunGroupCommands
 # wait 


